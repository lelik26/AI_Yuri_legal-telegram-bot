# handlers/book.py
from datetime import datetime, timedelta

from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from database.base import SessionLocal
from database.repository import save_consultation, get_lawyer_by_id, get_free_time_slots, generate_schedule
from legal_bot.keyboards import (
    phone_keyboard,
    generate_date_keyboard,
    choose_lawyer_keyboard,
    generate_time_keyboard
)
from config import DURATION_WORKING_HOUR
from logs.logger import setup_logger

logger = setup_logger(__name__)
router = Router()

class ConsultationState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_name = State()
    waiting_for_email = State()
    waiting_for_topic_client = State()
    waiting_for_lawyer = State()
    waiting_for_date = State()
    waiting_for_time = State()

async def consultation_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—á–∞–ª –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    await message.answer(
        "üìû <b>–®–∞–≥ 1 –∏–∑ 7</b> - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ).\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_book </i>",
        parse_mode="HTML",
        reply_markup=phone_keyboard()
    )
    await state.set_state(ConsultationState.waiting_for_phone)

async def phone_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    phone_number = message.contact.phone_number if message.contact else message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–æ–º–µ—Ä: {phone_number}")
    await state.update_data(phone=phone_number)
    await message.answer(
        "üìß <b>–®–∞–≥ 2 –∏–∑ 7</b> - –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–ú–Ø:\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_book </i>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ConsultationState.waiting_for_name)

async def name_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    name_client = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∏–º—è: {name_client}")
    await state.update_data(name_client=name_client)
    await message.answer(
        "üìß <b>–®–∞–≥ 3 –∏–∑ 7</b> - –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–∏–ª–∏ '–Ω–µ—Ç'):\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_book </i>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ConsultationState.waiting_for_email)

async def email_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    email = message.text.strip()
    if email.lower() == "–Ω–µ—Ç":
        email = None
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —É–∫–∞–∑–∞–ª email")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∫–∞–∑–∞–ª email: {email}")
    await state.update_data(email=email)
    await message.answer(
        "üìß <b>–®–∞–≥ 4 –∏–∑ 7</b> - –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Ç–µ–º—ã –∑–∞–ø–∏—Å–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ª–∏—á–Ω–æ'):\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_book </i>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ConsultationState.waiting_for_topic_client)

async def topic_book_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    topic_client = message.text.strip()
    if topic_client.lower() == "–ª–∏—á–Ω–æ" or topic_client == "":
        topic_client = None
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —É–∫–∞–∑–∞–ª —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∫–∞–∑–∞–ª —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {topic_client}")
    await state.update_data(topic_client=topic_client)

    keyboard = choose_lawyer_keyboard()
    if keyboard is None:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —é—Ä–∏—Å—Ç–æ–≤.", parse_mode="HTML")
        return
    await message.answer(
        "‚öñÔ∏è <b>–®–∞–≥ 5 –∏–∑ 7</b> - –í—ã–±–µ—Ä–∏—Ç–µ —é—Ä–∏—Å—Ç–∞:\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_book </i>",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.set_state(ConsultationState.waiting_for_lawyer)

async def lawyer_selected_handler(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑ callback_data –ø–æ–ª—É—á–∞–µ–º lawyer_id
    lawyer_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    try:

        lawyer = get_lawyer_by_id(db, lawyer_id)
        if not lawyer:
            await callback.answer("–û—à–∏–±–∫–∞! –Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è —é—Ä–∏—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(lawyer_id=lawyer_id, lawyer_full_name=lawyer.full_name())
        generate_schedule(db, lawyer)
        date_keyboard = generate_date_keyboard(db, lawyer)
        await callback.message.answer(
            f"‚öñÔ∏è <b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b> {lawyer.full_name()}\n"
            f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {lawyer.start_work.strftime('%H:%M')} - {lawyer.end_work.strftime('%H:%M')}\n"
            f"–û–±–µ–¥: 12:00-13:00\n"
            f"–í—ã—Ö–æ–¥–Ω—ã–µ: {', '.join(lawyer.weekends)}\n\n"
            "<b>–®–∞–≥ 6 –∏–∑ 7 - –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b>",
            parse_mode="HTML",
            reply_markup=date_keyboard
        )
        await state.set_state(ConsultationState.waiting_for_date)
    finally:
        db.close()
    await callback.answer()

async def date_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π —É —é—Ä–∏—Å—Ç–∞,
    –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.
    –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: "dd-mm-YYYY".
    """
    selected_date_str = callback.data.split("_")[1]
    try:
        selected_date = datetime.strptime(selected_date_str, "%d-%m-%Y").date()

    except ValueError:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", parse_mode="HTML")
        return

    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date_str}")

    data = await state.get_data()
    lawyer_id = data.get("lawyer_id")

    if not lawyer_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —é—Ä–∏—Å—Ç.")
        return

    db = SessionLocal()
    try:
        lawyer = get_lawyer_by_id(db, lawyer_id)
        if not lawyer:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞! –Æ—Ä–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã–º –¥–ª—è —é—Ä–∏—Å—Ç–∞.

        weekday_mapping = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞",
            "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        weekday_russian = weekday_mapping.get(selected_date.strftime("%A"))
        if lawyer.weekends and weekday_russian in lawyer.weekends:
            await callback.message.answer(f"‚õî {weekday_russian} - –≤—ã—Ö–æ–¥–Ω–æ–π —É —é—Ä–∏—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                                          parse_mode="HTML")
            return

        free_slots = get_free_time_slots(db, selected_date_str, lawyer)
        if not free_slots:
            await callback.message.answer("üî¥ –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                                          parse_mode="HTML")
            return

        time_keyboard = generate_time_keyboard(selected_date_str, lawyer)
        await callback.message.answer(
            "üïí <b>–®–∞–≥ 7 –∏–∑ 7</b> - –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è:\n\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_book</i>",
            parse_mode="HTML",
            reply_markup=time_keyboard
        )
        await state.update_data(date=selected_date_str)
        await state.set_state(ConsultationState.waiting_for_time)
    finally:
        db.close()
    await callback.answer()

async def time_handler(callback: types.CallbackQuery, state: FSMContext):
    selected_time = callback.data.split("_")[1]  # –§–æ—Ä–º–∞—Ç "HH:MM"
    logger.info(f"–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {selected_time}")
    data = await state.get_data()
    phone_number = data.get("phone")
    name_client = data.get("name_client")
    email = data.get("email")
    topic_client = data.get("topic_client")
    selected_date = data.get("date")
    lawyer_id = data.get("lawyer_id")
    lawyer_full_name = data.get("lawyer_full_name")
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    await state.update_data(time=selected_time)
    db = SessionLocal()
    try:
        success = save_consultation(
            db,
            user_id=user_id,
            username=username,
            phone_number=phone_number,
            name_client=name_client,
            email=email,
            date=selected_date,
            time=selected_time,
            lawyer_id=lawyer_id,
            name_lawyer=lawyer_full_name,
            topic_consultation=topic_client
        )
        if success:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏—ë–º–∞, –¥–æ–±–∞–≤–ª—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—ë–º–∞
            end_time_obj = (datetime.strptime(selected_time, "%H:%M") +
                            timedelta(minutes=DURATION_WORKING_HOUR)).time()
            confirmation = (
                f"‚úÖ <b>–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {name_client}!</b> –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {selected_date}\n"
                f"üïí <b>–í—Ä–µ–º—è:</b> {selected_time} - {end_time_obj.strftime('%H:%M')}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
                f"üìß <b>Email:</b> {email if email else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìù <b>–¢–µ–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b> {topic_client if topic_client else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üë®‚Äç‚öñÔ∏è <b>–í–∞—à —é—Ä–∏—Å—Ç:</b> {lawyer_full_name}\n\n"
                "–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
            )
            await callback.message.answer(confirmation, parse_mode="HTML")
        else:
            await callback.message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
        await callback.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.",
            parse_mode="HTML"
        )
    finally:
        db.close()
    await state.clear()
    await callback.answer()
    logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –¥–ª—è {username} –∑–∞–≤–µ—Ä—à—ë–Ω")
