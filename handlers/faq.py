# handler/faq.py

from aiogram import types, Router
from aiogram.fsm.state import State, StatesGroup
from database.repository import fetch_frequent_questions, get_knowledge_by_id
from database.base import SessionLocal
from legal_bot.keyboards import generate_faq_keyboard

from services.send_response import send_response, format_response
from services.generation_text import generate_faq_text

from logs.logger import setup_logger

logger = setup_logger(__name__)
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FAQ
class FAQState(StatesGroup):
    waiting_for_faq = State()


async def faq_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /faq.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—Å—Ç–æ–º + –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏.
    """
    with SessionLocal() as db:
        faq_entries = fetch_frequent_questions(db, limit=10)

    if not faq_entries:
        await message.answer("‚ùì –í –±–∞–∑–µ –Ω–µ—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(generate_faq_text(faq_entries), parse_mode="HTML")
    await message.answer("üìå <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:</b>", parse_mode="HTML", reply_markup=generate_faq_keyboard(faq_entries))



# –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º
async def faq_callback_handler(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É FAQ.
    """
    data = callback.data  # –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç "faq_{id}"

    if not data.startswith("faq_"):
        return

    try:
        faq_id = int(data.split("_")[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.", show_alert=True)
        return

    with SessionLocal() as db:
        result = get_knowledge_by_id(db, faq_id)

    if not result:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ `send_response()`, —É–∫–∞–∑—ã–≤–∞—è, —á—Ç–æ —ç—Ç–æ FAQ
    await send_response(callback.message, format_response(result), is_faq=True)


