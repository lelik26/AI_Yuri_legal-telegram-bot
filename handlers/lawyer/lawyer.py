# from aiogram import types, Router, F
# from datetime import datetime, timedelta
# from aiogram.filters import Command
# from database.repository import get_consultations_by_date
# from legal_bot.keyboards import generate_lawyer_date_keyboard
# from logs.logger import setup_logger
# from database.base import SessionLocal
#
# logger = setup_logger(__name__)
# router = Router()
#
# @router.message(Command("booking_schedule"))
# async def booking_schedule_handler(message: types.Message):
#     """
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —é—Ä–∏—Å—Ç—É inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –±–ª–∏–∂–∞–π—à–∏—Ö 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö).
#     """
#     keyboard = generate_lawyer_date_keyboard()
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:", reply_markup=keyboard, parse_mode="HTML")
#
# @router.callback_query(lambda c: c.data.startswith("lawyer_date_"))
# async def lawyer_date_callback(callback: types.CallbackQuery):
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã —é—Ä–∏—Å—Ç–æ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.
#     """
#     selected_date = callback.data.split("_")[-1]  # —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
#     db = SessionLocal()
#     try:
#         consultations = get_consultations_by_date(db, selected_date)
#         if consultations:
#             response_text = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {selected_date}:</b>\n\n"
#             for cons in consultations:
#                 # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
#                 response_text += (f"üïí –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {cons.consultation_time} - –ö–ª–∏–µ–Ω—Ç: {cons.name_client}\n"
#                                   f"üìû —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: {cons.phone_number}\n"
#                                   f"–¢–µ–º–∞: {cons.question if cons.question else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n")
#         else:
#             response_text = f"–ù–∞ {selected_date} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã."
#     except Exception as e:
#         logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %s", str(e))
#         response_text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
#     finally:
#         db.close()
#     await callback.message.edit_text(response_text, parse_mode="HTML")
#     await callback.answer()
