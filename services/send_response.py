# services/send_response
from aiogram import types
from legal_bot.keyboards import default_keyboard
from services.split_message import split_message
from templates.templates_text_answer import FINISH_ASK_TEXT, NEXT_FAQ_TEXT


def format_response(result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å."""

    return {
        "text": f"‚úÖ <b>–ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n {result.answer} \n\n",
        "list_steps": f"üìå <b>üìù –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:</b>\n{result.list_steps}\n\n",
        "templates": f"<b> üìå üìú–°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: </b>\n{result.templates}\n\n",
        "references": f"üìå <b>üîó –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ ‚öñÔ∏è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã:</b>\n{result.references}\n\n",
        "recommendations": f"üìå <b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n{result.recommendations}\n\n",
        "source": "knowledge_base"
    }

async def send_response(message: types.Message, response: dict, is_faq: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).

    :param message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    :param response: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞
    :param is_faq: —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ FAQ
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    for part in split_message(response.get("text") or ""):
        await message.answer(part, parse_mode="HTML", reply_markup=default_keyboard())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ)
    for key in ["list_steps", "templates", "references", "recommendations"]:
        if response.get(key):
            await message.answer(response[key], parse_mode="HTML", reply_markup=default_keyboard())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_text = NEXT_FAQ_TEXT if is_faq else FINISH_ASK_TEXT
    await message.answer(final_text, parse_mode="HTML", reply_markup=default_keyboard())
