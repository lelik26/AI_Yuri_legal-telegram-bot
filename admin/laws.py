# from aiogram import types, Router
# from database.repository import update_law_link
# from utils.check_admin import check_admin
#
# router = Router()
#
# @router.message(commands=["update_law"])
# async def update_law_handler(message: types.Message):
#     """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å—Å—ã–ª–∫–∏."""
#     if not await check_admin(message):
#         return
#     await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ `–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞` –∏ `–Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫–æ–Ω` —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
#
# @router.message(lambda message: "," in message.text)
# async def process_law_update(message: types.Message):
#     """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫–æ–Ω –≤ –ë–î."""
#     if not await check_admin(message):
#         return
#
#     try:
#         doc_name, new_link = map(str.strip, message.text.split(",", 1))
#         update_law_link(doc_name, new_link)
#         await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è `{doc_name}` –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_link}")
#     except Exception as e:
#         await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
