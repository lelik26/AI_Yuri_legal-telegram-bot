# import os
# from aiogram import types, Router
# from aiogram.types import FSInputFile
# from database.repository import save_document, fetch_document_path, delete_entry, list_entries
# from utils.check_admin import check_admin
#
# router = Router()
#
# @router.message(commands=["list_entries"])
# async def list_entries_handler(message: types.Message):
#     """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
#     if not await check_admin(message):
#         return
#
#     entries = list_entries()
#     if not entries:
#         await message.answer("üìÇ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
#     else:
#         text = "üìú **–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n" + "\n".join([f"üîπ {e[0]} ‚Äì {e[1]}" for e in entries])
#         await message.answer(text, parse_mode="Markdown")
#
# # üìé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
# @router.message(commands=["add_document"])
# async def add_document_handler(message: types.Message):
#     """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
#     if not await check_admin(message):
#         return
#     await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX) —Å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
#
# @router.message(lambda message: message.document is not None)
# async def save_document_handler(message: types.Message):
#     """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø–∞–ø–∫–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å –≤ –ë–î."""
#     if not await check_admin(message):
#         return
#
#     document = message.document
#     file_name = document.file_name
#     file_path = f"documents/{file_name}"
#
#     # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø–∞–ø–∫—É
#     os.makedirs("documents", exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
#     await message.bot.download(document, file_path)
#
#     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Ç—å –≤ –ë–î
#     save_document(file_name, file_path)
#
#     await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç `{file_name}` –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
#
# # üìú –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# @router.message(commands=["get_document"])
# async def get_document_handler(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ø–∞–ø–∫–∏."""
#     file_name = message.text.split(maxsplit=1)[-1]
#     file_path = fetch_document_path(file_name)
#
#     if file_path and os.path.exists(file_path):
#         await message.answer_document(document=FSInputFile(file_path))
#     else:
#         await message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#
#
# # ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ  –¥–æ–∫—É–º–µ–Ω—Ç–∞
# @router.message(commands=["delete_entry"])
# async def delete_entry_handler(message: types.Message):
#     """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
#     if not await check_admin(message):
#         return
#     await message.answer("‚úèÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
#
# @router.message()
# async def process_delete_entry(message: types.Message):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
#     if not await check_admin(message):
#         return
#
#     file_name = message.text.strip()
#     delete_entry(file_name)
#     await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å `{file_name}` —É–¥–∞–ª–µ–Ω–∞.")
#
#
